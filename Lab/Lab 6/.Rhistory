mpg_per_cyl
for (i in 1:nrow(mtcars_df)){
mpg_per_cyl[i] = ratio_1(mtcars_df$mpg[i], mtcars_df$cyl[i])
}
mtcars_df$mpg_per_cyl = mpg_per_cyl
mtcars_df
mpg_per_cyl
data("mtcars")
car_names = rownames(mtcars)
mtcars_df = as.tibble(mtcars)
mtcars_df$name = car_names
mpg_per_cyl <- vector("double", nrow(mtcars_df))
for (i in 1:nrow(mtcars_df)) {
mpg_per_cyl[i] <- ratio_1(mtcars$mpg[i], mtcars$cyl[i])
}
View(mtcars)
mpg_per_cyl <- vector("double", nrow(mtcars_df))
for (i in 1:nrow(mtcars_df)) {
mpg_per_cyl[i] <- ratio_1(mtcars$mpg[i], mtcars$cyl[i])
}
mpg_per_cyl <- vector("double", nrow(mtcars_df))
for (i in 1:nrow(mtcars_df)) {
mpg_per_cyl[i] <- ratio_1(mtcars_df$mpg[i], mtcars_Df$cyl[i])
}
mpg_per_cyl[i] <- ratio_1(mtcars_df$mpg[i], mtcars_df$cyl[i])
for (i in 1:nrow(mtcars_df)) {
mpg_per_cyl[i] <- ratio_1(mtcars_df$mpg[i], mtcars_df$cyl[i])
}
mtcars_df$mpg_per_cyl = mpg_per_cyl
View(mtcars_df)
mtcars_df %>%
arrange(desc(mpg_per_cyl))
mtcars_df %>%
select(name, mpg_per_cyl) %>%
arrange(desc(mpg_per_cyl))
mtcars_df %>% arrange(-mpg_per_cyl)
setwd("~/School/BIOS 611/Course Github/datasci611/practice_exam/practice_data")
librarians_df <- read_csv("librarians_by_msa.csv")
librarians_df <- read_csv("librarians-by-msa.csv")
setwd("~/School/BIOS 611/Course Github/datasci611/practice_exam/practice_data")
librarians_df <- read_csv("librarians-by-msa.csv")
librarians_df <- read_csv("librarians-by-msa.csv")
library(readr)
librarians_by_msa <- read_csv("librarians-by-msa.csv")
View(librarians_by_msa)
librarians_df <- read_csv("librarians-by-msa.csv")
librarians_by_msa <- read_csv("librarians-by-msa.csv")
library(readr)
librarians_by_msa <- read_csv("librarians-by-msa.csv")
setwd("~/School/BIOS 611/Course Github/datasci611/practice_exam/practice_data")
librarians_by_msa <- read_csv("librarians-by-msa.csv")
librarians_by_msa <- read_csv("librarians-by-msa.csv")
setwd("~/School/BIOS 611/Course Github/datasci611/practice_exam/practice_data")
read_csv("librarians-by-msa.csv")
librarians_by_msa <- read_csv("practice_data/librarians-by-msa.csv")
librarians_df <- read_csv("practice_data/librarians-by-msa.csv")
View(librarians_df)
librarians_df <- read_csv("practice_data/librarians-by-msa.csv", na = "**")
View(librarians_df)
congress_df <- read_csv("congress_terms.csv")
congress_df <- read_csv("practice_data/congress_terms.csv")
congress_df <- read_csv("practice_data/congress_terms.csv")
librarians_df <- read_csv("practice_data/librarians-by-msa.csv", na = "**")
congress_df <- read_csv("practice_data/congress-terms.csv")
View(congress_df)
View(congress_df)
state_lib_1000_df <-
librarians_df %>%
rename(state = prim_state) %>%
group_by(state) %>%
summarise(average = mean(jobs_1000, na.rm = TRUE))
state_lib_1000_df = librarians_df %>%
group_by(prim_state) %>%
summarise(jobs_1000 = mean(jobs_1000)) %>%
mutate(state = prim_state) %>%
select(state, jobs_1000)
head(state_lib_1000_df)
state_lib_1000_df <-
librarians_df %>%
rename(state = prim_state) %>%
group_by(state) %>%
summarise(average = mean(jobs_1000, na.rm = TRUE))
head(state_lib_1000_df)
state_lib_1000_df <-
librarians_df %>%
rename(state = prim_state) %>%
group_by(state) %>%
summarise(average = mean(jobs_1000))
head(state_lib_1000_df)
congress_df %>%
left_join(state_lib_1000_df, by = state)
congress_df %>%
left_join(state_lib_1000_df, by = 'state')
congress_df %>%
left_join(state_lib_1000_df, by = 'state') %>%
select(lastnames, party, state, congress, jobs_1000)
congress_df %>%
left_join(state_lib_1000_df, by = 'state') %>%
select(congress, lastname, party, state, congress, jobs_1000)
lib_cong_df = congress_df %>%
left_join(state_lib_1000_df, by='state') %>%
select(congress, lastname, birthday, state, party, jobs_1000) %>%
arrange(jobs_1000)
View(librarians_df)
state_lib_1000_df <-
librarians_df %>%
rename(state = prim_state) %>%
group_by(state) %>%
summarise(average = mean(jobs_1000, na.rm = TRUE))
View(state_lib_1000_df)
congress_df %>%
left_join(state_lib_1000_df, by = 'state') %>%
select(congress, lastname, party, state, congress, jobs_1000)
lib_cong_df = congress_df %>%
left_join(state_lib_1000_df, by='state') %>%
select(congress, lastname, birthday, state, party, jobs_1000) %>%
arrange(jobs_1000)
congress_df %>%
left_join(state_lib_1000_df, by='state')
congress_df %>%
left_join(state_lib_1000_df, by = 'state') %>%
select(congress, lastname, party, state, congress, average)
congress_df %>%
left_join(state_lib_1000_df, by = 'state') %>%
select(congress, lastname, party, state, congress, average) %>%
filter(average == max(average) | average == min(average))
lib_cong_df$state[1]
congress_df %>%
left_join(state_lib_1000_df, by = 'state') %>%
select(congress, lastname, party, state, congress, average) %>%
filter((average == max(average) | average == min(average)) & congress == max(congress))
```{r}
state_lib_1000_df = librarians_df %>%
group_by(prim_state) %>%
summarise(jobs_1000 = mean(jobs_1000)) %>%
mutate(state = prim_state) %>%
select(state, jobs_1000)
head(state_lib_1000_df)
lib_cong_df = congress_df %>%
left_join(state_lib_1000_df, by='state') %>%
select(congress, lastname, birthday, state, party, jobs_1000) %>%
arrange(jobs_1000)
least_lib_state = lib_cong_df$state[1]
most_lib_state = lib_cong_df$state[nrow(lib_cong_df)]
congressmen_from_least_lib_state = lib_cong_df %>%
filter(state == least_lib_state & congress == max(congress)) %>%
select(lastname, party, state, congress)
congressmen_from_most_lib_state = lib_cong_df %>%
filter(state == most_lib_state & congress == max(congress)) %>%
select(lastname, party, state, congress)
head(congressmen_from_least_lib_state)
head(congressmen_from_most_lib_state)
head(congressmen_from_least_lib_state)
congress_df %>%
left_join(state_lib_1000_df, by = 'state') %>%
select(congress, lastname, party, state, congress, average) %>%
filter((average == max(average) | average == min(average)) & congress == max(congress)) %>%
arrange(desc(average))
state_lib_1000_df <-
librarians_df %>%
rename(state = prim_state) %>%
group_by(state) %>%
summarise(average = mean(jobs_1000, na.rm = TRUE))
head(state_lib_1000_df)
congress_df %>%
left_join(state_lib_1000_df, by = 'state') %>%
select(congress, lastname, party, state, congress, average) %>%
filter((average == max(average) | average == min(average)) & congress == max(congress)) %>%
arrange(desc(average))
state_lib_1000_df = librarians_df %>%
group_by(prim_state) %>%
summarise(jobs_1000 = mean(jobs_1000)) %>%
mutate(state = prim_state) %>%
select(state, jobs_1000)
head(state_lib_1000_df)
lib_cong_df = congress_df %>%
left_join(state_lib_1000_df, by='state') %>%
select(congress, lastname, birthday, state, party, jobs_1000) %>%
arrange(jobs_1000)
least_lib_state = lib_cong_df$state[1]
most_lib_state = lib_cong_df$state[nrow(lib_cong_df)]
most_lib_state
librarians_df %>%
ggplot(aes(jobs_1000,tot_emp)) +
geom_point() +
geom_smooth(stat = "lm")
?geom_line
?geom_smooth
librarians_df %>%
ggplot(aes(jobs_1000,tot_emp)) +
geom_point() +
geom_smooth(method = lm)
librarians_df %>%
ggplot(aes(jobs_1000,tot_emp)) +
geom_point() +
geom_smooth(method = lm, color = 'red', se = FALSE)
librarians_df %>%
data_grid(tot_emp)
lib_model = lm(jobs_1000 ~ tot_emp, data=librarians_df)
mod_predictions = librarians_df %>%
data_grid(tot_emp) %>%
add_predictions(lib_model, 'jobs_1000')
mod_predictions
lib_model = lm(jobs_1000 ~ tot_emp, data=librarians_df)
mod_predictions = librarians_df %>%
data_grid(tot_emp) %>%
add_predictions(lib_model, 'jobs_1000')
ggplot(librarians_df, aes(tot_emp, jobs_1000)) +
geom_point() +
geom_line(data=mod_predictions, color='red')
lm(jobs_1000~tot_emp, data = librarians_df)
librarians_df %>%
ggplot(aes(tot_emp, jobs_1000)) +
geom_point() +
geom_smooth(method = lm, color = 'red', se = FALSE)
return(x[str_detect(x, '^[^M]')])
rmm <- function(x) {
return(x[str_detect(x, '^[^M]')])
}
librarians_df$no_m_area_name <- rmm(librarians_df$area_name)
rmm(librarians_df$area_name)
librarians_df$no_m_area_name <- rmm(librarians_df$area_name)
View(librarians_df)
rmm <- function(phrase) {
new_phrase = str_replace_all(phrase, pattern="\\bM[:alpha:]*", replacement = "")
return(new_phrase)
}
ldf = librarians_df %>%
select(area_name) %>%
mutate(no_m_area_name = rmm(area_name))
ldf
View(ldf)
librarians_df[,-2]
pre_process_values = preProcess(librarians_df[,3:6], method = c("center", "standard"))
pre_process_values = preProcess(librarians_df[,3:6], method = c("center", "scale"))
new <- predict(pre_process_values,librarians_df[,3:6])
new
pre_process_values = preProcess(librarians_df[,3:6], method = c("center", "scale"))
new <- predict(pre_process_values,librarians_df[,3:6])
# Calculate distance between all observations
dist_mat = new %>%
dist(method = "euclidean")
# Cluster closest first, then work outwards
hfit = hclust(dist_mat, method="ward")
# Calculate distance between all observations
dist_mat = new %>%
dist(method = "ward")
# Cluster closest first, then work outwards
hfit = hclust(dist_mat, method="average")
# Calculate distance between all observations
dist_mat = new %>%
dist(method = "euclidean")
# Cluster closest first, then work outwards
hfit = hclust(dist_mat, method="average")
new <- na.omit(new)
# Calculate distance between all observations
dist_mat = new %>%
dist(method = "euclidean")
# Cluster closest first, then work outwards
hfit = hclust(dist_mat, method="average")
plot(hfit)
hclust_sol = librarians_df %>%
select(tot_emp, emp_prse, jobs_1000, loc_quotient) %>%
na.omit() %>%
preProcess(method=c("center", "scale")) %>%
predict(librarians_df) %>%
na.omit() %>%
dist() %>%
hclust(method="ward")
plot(hclust_sol)
# Cluster closest first, then work outwards
hfit = hclust(dist_mat, method="ward")
plot(hfit)
# Append cluster assignment
groups = cutree(hfit, k=2)
gene_df$cluster_h = as.factor(groups)
new_df$cluster_h = as.factor(groups)
new$cluster_h = as.factor(groups)
rect.hclust(hfit, k=3, border="red")
# Cluster closest first, then work outwards
hfit = hclust(dist_mat, method="ward")
plot(hfit)
# Append cluster assignment
groups = cutree(hfit, k=2)
new$cluster_h = as.factor(groups)
rect.hclust(hfit, k=3, border="red")
# Plot results
ggplot(gene_df, aes(gene_a, gene_b, group=cluster)) +
geom_point(size=2, alpha=0.75, aes(color=cluster))
View(new)
area_c = cutree(hclust_sol, k=2)
librarians_df %>%
na.omit() %>%
mutate(cluster = factor(area_c)) %>%
ggplot(aes(emp_prse, tot_emp)) +
geom_point(aes(color=cluster))
# Problem 1
WorldPhones %>%
data.frame() %>%
add_rownames("year") %>%
mutate(year = as.numeric(year)) %>%
gather(key = continent, value = phones, - year)  -> dat
lm.1 <- dat %>%
lm(phones ~ year * continent, .)
dat %>%
add_predictions(lm.1) %>%
ggplot(aes(year, phones, col = continent)) +
geom_point() +
geom_line(aes(year, pred, col = continent)) +
ylab("Number of phones")
# Problem 2
attitude
knn.tab <- data_frame(k = 1:10, wss = map_dbl(k, ~kmeans(attitude, .)$tot.withinss))
knn.tab %>%
ggplot(aes(k, wss)) +
geom_line()
k=3
km <- kmeans(attitude, 3)
km
attitude %>%
mutate(cluster = as.factor(km$cluster)) %>%
ggplot(aes(learning, complaints, col = cluster)) +
geom_point()
km$centers
as.data.frame(km$centers)
WorldPhones
attitude
setwd("~/School/BIOS 611/BIOS611Git/Lab/Lab 6")
library(tidyverse)
library(testthat)
source("function.R")
source("functions.R")
expect_error(compositional(dat, 1))
expect_error(scatterPDF(1, 2, dat3))
expect_equal(abs(5), 5)
expect_equal(abs(5), 4)
expect_error(compositional(dat, 1))
expect_error(scatterPDF(1, 2, dat3))
test_that("scatter", {
expect_is(scatter(1,2,dat2),"ggplot")
expect_error(scatter(1,2,dat3))
# use expect_warning because we wrote that when encountering error, return a warning
expect_warning(scatterPDF("example3.pdf", 1:5, 2:3, data = dat2))
})
test_dir(".", reporter = "summary")
return(x+y)
library(tidyverse)
library(modelr)
library(stringr)
set.seed(2018)
data_df = tibble(a = rnorm(n=25),
b = runif(n=25),
c = seq(1, 100, 4),
d = factor(rep(x = c('a', 'b', 'c', 'd', 'e'), each = 5)))
data_df %>%
mutate(f = a + 10*b)
data_df %>%
select(contains("c"))
select(data_df$d, contains("c"))
data_df %>%
filter(d == c)
data_df %>%
filter(d == "c")
data_df %>%
filter(d == "c") %>%
summarise(average = mean(b))
data_df %>%
filter(d == "c") %>%
summarise(average_b = mean(b))
data_df %>%
filter(d == "d" | d == "e") %>%
select(a,c)
data_df %>%
filter(d == "d" | d == "e") %>%
select(a,c) %>%
colSums()
lala = data_df %>%
filter(d == "d" | d == "e") %>%
select(a,c)
sum(lala$a)
data_df %>%
filter(d == "d" | d == "e") %>%
select(a,c) %>%
colSums()
lala = data_df %>%
filter(d == "d" | d == "e") %>%
select(a,c)
sum(lala$a)
1^2
2^2
abs(-1)
if (x > y) {
x^2/abs(y)
} else {
y^2/abs(x)
}
f1 <- function(x,y) {
if (x > y) {
x^2/abs(y)
} else {
y^2/abs(x)
}
}
f1(1,2)
f1(-1,2)
g <- vector("double", nrow(data_df))
for (i in 1:nrow(data_df)) {
g[i] = f1(a[i],b[i])
}
g <- vector("double", nrow(data_df))
for (i in 1:nrow(data_df)) {
g[i] = f1(data_df$a[i],data_df$b[i])
}
data_df$g <- g
View(data_df)
a[1]
data_df[1]
data_df$a[1]
data_df$b[1]
data_df$b[1]^2/abs(data_df$a[1])
f2 <- function(x) {
if (x > 0) {
return(1)
} else {
return(0)
}
}
f2(3)
f2 <- function(x) {
if (x > 0) {
print(1)
} else {
return(0)
}
}
f2(3)
map_dbl(data_df$a,f2)
data_df$a
map_dbl(data_df$a,f2)
data_df$a
map_dbl(data_df$a,f2)
a_positive <- map_dbl(data_df$a,f2)
a_positive[a_positive==0]
n(a_positive[a_positive==0])
count((a_positive[a_positive==0])
)
length((a_positive[a_positive==0]))
a_positive <- map_dbl(data_df$a,f2)
length(a_positive[a_positive==1])/length(a_positive)
f2(2)
12/25
25-12
13/25
quotes_df <- read_tsv('data/quotes_attributed_to_tr.tsv')
View(quotes_df)
quotes_df %>%
arrange(desc(phrase_id))
?read_tsv
iris_df <- as.tibble(iris)
write_csv(iris_df, "data/iris.csv")
iris_df <- as.tibble(iris)
write_csv(iris_df, "data/iris.csv")
iris_df %>%
ggplot(aes(x = Sepal.Length, y = Petal.Length), color = Species) +
geom_point() +
theme_minimal()
iris_df %>%
ggplot(aes(x = Sepal.Length, y = Petal.Length), color = Species) +
geom_point() +
theme_minimal()
iris_df %>%
ggplot() +
geom_point(aes(x = Sepal.Length, y = Petal.Length), color = Species) +
theme_minimal()
iris_df
iris_df %>%
ggplot() +
geom_point(aes(x = Sepal.Length, y = Petal.Length), color = as.factor(Species)) +
theme_minimal()
class(iris_df$Species)
iris_df %>%
ggplot() +
geom_point(aes(x = Sepal.Length, y = Petal.Length), color = Species) +
theme_minimal() +
labs(title = 'Future goal is to identify unspecified source_pms of human origin',
x = 'Year',
y = 'Percentage')
iris_df %>%
ggplot() +
geom_point(aes(x = Sepal.Length, y = Petal.Length, color = Species)) +
theme_minimal() +
labs(title = 'Future goal is to identify unspecified source_pms of human origin',
x = 'Year',
y = 'Percentage')
iris %>%
ggplot() +
geom_point(aes(x = Sepal.Length, y = Petal.Length, color = Species)) +
theme_minimal() +
labs(title = 'Future goal is to identify unspecified source_pms of human origin',
x = 'Year',
y = 'Percentage')
library(lattice)
data("USRegionalMortality")
USRegionalMortality %>%
ggplot(., aes(x = reorder(Cause, Rate, FUN = mean), y = Rate, color = Sex)) +
geom_boxplot() +
coord_flip() +
facet_wrap(~Status, nrow = 2) +
ylab('Death rate per 100,000 population') +
xlab('Cuase of death') +
theme(legend.position = 'top') +
theme_bw()
