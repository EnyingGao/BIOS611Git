clean_text <- function(text){
text <- unlist(str_split(tolower(text)," ")) # All lowercase and split by space
text <- unlist(str_split(text,",")) # Split by ,
text <- unlist(str_split(text,"-")) # Split by -
text <- unlist(str_split(text,":")) # Split by :
text <- unlist(str_split(text,"'")) # Split by '
text <- unlist(str_split(text,";")) # Split by ;
return(text)
}
# Apply clean_text function to title and abstract
original_text2 <- if(str_detect(abstract[4], "Author")) {
abstract[2]} else if (str_detect(abstract[3], "Author")) {
abstract[1]} else {
abstract[3]
}
original_text5 <- if(str_detect(abstract[4], "Author")) {
abstract[5]} else if (str_detect(abstract[3], "Author")) {
abstract[4]} else {
abstract[6]
}
cleaned_text2 <- clean_text(original_text2) # Cleaned title
cleaned_text5 <- clean_text(original_text5) # Cleaned abstract
# Since titles are often infomative, we would use titles as foundations to discover the most frequent words being mentioned in the abstract
# Use words from title to create a list of keywords to find subject emphases of the abstract
match <- cleaned_text2[!cleaned_text2 %in% c("")]
match <- str_c(match, collapse = "|")
words <- cleaned_text5[!cleaned_text5 %in% c("")]
find_keywords <-str_detect(str_to_lower(words), match) # match words with keywords
# Create a data frame that list the frequency of the words in the abstract based on title
term_frequency_title <-
data_frame(subject_emphases = words[find_keywords]) %>%
group_by(subject_emphases) %>%
filter(!(subject_emphases %in% c('to', 'a', 'of', 'the','and','in','can','for','it','this',
'as','into','is', 'from', 'that', 'have', 'has', 'not', 'should',
'might', 'they', "", "or", "was", "with", "after", "before", "at",
"were", "those", "without", "by", "we", "are", "95%", "an", "among",
"between", ".", "="))) %>%
summarise(frequency = n()) %>%
arrange(desc(frequency)) %>%
head(10)
# Result of term_frequency_title
term_frequency_title
# Lowercase title and abstract and combine them together
text <- paste0(tolower(abstract[2]), tolower(abstract[5]), collapse = " ")
# Apply clean_text function and split string into words
words <- unlist(str_split(str_trim(clean_text(text)), " "))
# Create a data frame that list the frequency of the words in the abstract and title
# Select the top 10 most common words
term_frequency_general <-
data_frame(words) %>%
group_by(words) %>%
filter(!(words %in% c('to', 'a', 'of', 'the','and','in','can','for','it','this',
'as','into','is', 'from', 'that', 'have', 'has', 'not', 'should',
'might', 'they', "", "or", "was", "with", "after", "before", "at",
"were", "those", "without", "by", "we", "are", "95%", "an", "among",
"between", ".", "="))) %>%
summarise(frequency = n()) %>%
arrange(desc(frequency)) %>%
head(10)
# Result of term_frequency_general
term_frequency_general
# Join tables term_frequency_title and term_frequency_general
joined_term_frequency <- full_join(term_frequency_title, term_frequency_general, by = c('subject_emphases' = 'words'))
# Calculate final term frequency
final_term_frequency <-
joined_term_frequency %>%
mutate(term_frequency = rowSums(joined_term_frequency[-1], na.rm = TRUE)) %>%
dplyr::select(subject_emphases, term_frequency) %>%
arrange(desc(term_frequency))
# Result of final_term_frequency
final_term_frequency
# Combine names of the institutions and subject_emphases of the abstract into one table
abstract_emphases <- paste(unlist(final_term_frequency[1]), collapse = ' ')
institution_table_with_subject_emphases <-
data.frame(institution_list, abstract_emphases)
# Result of institution table with subject emphases
institution_table_with_subject_emphases
# Export table as a csv file
fileConn = file("out.csv")
writeLines(paste(institution_list, abstract_emphases, sep = ','), fileConn)
close(fileConn)
# Load Data
abstract <- read_lines('abs284.txt')
# Create a list of keywords to find institutions
match <- c("university", "college", "institute", "school", "center", "research", "organisation", "nih", "clinic")
match <- str_c(match, collapse = "|")
# Split Author information
author <- if(str_detect(abstract[4], "Author")) {
abstract[4]} else if (str_detect(abstract[3], "Author")) {
abstract[3]} else {
abstract[5]
}
init_split = str_split(author, "[()]")
# Clean the list of authors
cleaned_list = init_split[[1]][c(seq(3, length(init_split[[1]]), 2))]
# Create a function that returns the name of the insitution per author
find_institution <- function(number) {
words = str_trim(unlist(str_split(cleaned_list[number], ","))) # split sentences into wordss
find_keywords = str_detect(str_to_lower(words), match) # match wordss with keywords
if(length(words[find_keywords]) == 1) {
return(words[find_keywords])
} else if (length(words[find_keywords]) == 0) {
return(words[1])
} else {
return(words[find_keywords][length(words[find_keywords])])
}
}
# Use for loop to generate a list of institution names for this particular abstract
institution_list = vector('character', length(cleaned_list))
for(i in seq_along(cleaned_list)) {
institution = find_institution(i)
institution_list[i] = institution }
# Result of associated institutions
institution_list
# Create a function that clean up the text
clean_text <- function(text){
text <- unlist(str_split(tolower(text)," ")) # All lowercase and split by space
text <- unlist(str_split(text,",")) # Split by ,
text <- unlist(str_split(text,"-")) # Split by -
text <- unlist(str_split(text,":")) # Split by :
text <- unlist(str_split(text,"'")) # Split by '
text <- unlist(str_split(text,";")) # Split by ;
return(text)
}
# Apply clean_text function to title and abstract
original_text2 <- if(str_detect(abstract[4], "Author")) {
abstract[2]} else if (str_detect(abstract[3], "Author")) {
abstract[1]} else {
abstract[3]
}
original_text5 <- if(str_detect(abstract[4], "Author")) {
abstract[5]} else if (str_detect(abstract[3], "Author")) {
abstract[4]} else {
abstract[6]
}
cleaned_text2 <- clean_text(original_text2) # Cleaned title
cleaned_text5 <- clean_text(original_text5) # Cleaned abstract
# Since titles are often infomative, we would use titles as foundations to discover the most frequent words being mentioned in the abstract
# Use words from title to create a list of keywords to find subject emphases of the abstract
match <- cleaned_text2[!cleaned_text2 %in% c("")]
match <- str_c(match, collapse = "|")
words <- cleaned_text5[!cleaned_text5 %in% c("")]
find_keywords <-str_detect(str_to_lower(words), match) # match words with keywords
# Create a data frame that list the frequency of the words in the abstract based on title
term_frequency_title <-
data_frame(subject_emphases = words[find_keywords]) %>%
group_by(subject_emphases) %>%
filter(!(subject_emphases %in% c('to', 'a', 'of', 'the','and','in','can','for','it','this',
'as','into','is', 'from', 'that', 'have', 'has', 'not', 'should',
'might', 'they', "", "or", "was", "with", "after", "before", "at",
"were", "those", "without", "by", "we", "are", "95%", "an", "among",
"between", ".", "="))) %>%
summarise(frequency = n()) %>%
arrange(desc(frequency)) %>%
head(10)
# Result of term_frequency_title
term_frequency_title
# Lowercase title and abstract and combine them together
text <- paste0(tolower(abstract[2]), tolower(abstract[5]), collapse = " ")
# Apply clean_text function and split string into words
words <- unlist(str_split(str_trim(clean_text(text)), " "))
# Create a data frame that list the frequency of the words in the abstract and title
# Select the top 10 most common words
term_frequency_general <-
data_frame(words) %>%
group_by(words) %>%
filter(!(words %in% c('to', 'a', 'of', 'the','and','in','can','for','it','this',
'as','into','is', 'from', 'that', 'have', 'has', 'not', 'should',
'might', 'they', "", "or", "was", "with", "after", "before", "at",
"were", "those", "without", "by", "we", "are", "95%", "an", "among",
"between", ".", "="))) %>%
summarise(frequency = n()) %>%
arrange(desc(frequency)) %>%
head(10)
# Result of term_frequency_general
term_frequency_general
# Join tables term_frequency_title and term_frequency_general
joined_term_frequency <- full_join(term_frequency_title, term_frequency_general, by = c('subject_emphases' = 'words'))
# Calculate final term frequency
final_term_frequency <-
joined_term_frequency %>%
mutate(term_frequency = rowSums(joined_term_frequency[-1], na.rm = TRUE)) %>%
dplyr::select(subject_emphases, term_frequency) %>%
arrange(desc(term_frequency))
# Result of final_term_frequency
final_term_frequency
# Combine names of the institutions and subject_emphases of the abstract into one table
abstract_emphases <- paste(unlist(final_term_frequency[1]), collapse = ' ')
institution_table_with_subject_emphases <-
data.frame(institution_list, abstract_emphases)
# Result of institution table with subject emphases
institution_table_with_subject_emphases
# Export table as a csv file
fileConn = file("out1.csv")
writeLines(paste(institution_list, abstract_emphases, sep = ','), fileConn)
close(fileConn)
# Load Data
institution_information <- read_csv('lalala.csv', col_names = c('institution', 'abstract_emphases'))
# Load Data
institution_information <- read_csv('lalala.csv', col_names = c('institution', 'abstract_emphases'))
# Load Data
institution_information <- read_csv('lalala', col_names = c('institution', 'abstract_emphases'))
# Load Data
institution_information <- read_csv('lalala.csv', col_names = c('institution', 'abstract_emphases'))
# Load Data
institution_information <- read_csv('hello.csv', col_names = c('institution', 'abstract_emphases'))
# Count the number of collaborations for each institution
number_of_collaborations <-
institution_information %>%
group_by(institution) %>%
summarise(collaborations = n()) %>%
arrange(desc(collaborations))
# Combine abstract emphases for the same institution
subject_emphases_of_collaborations1 <-
institution_information %>%
group_by(institution) %>%
mutate(new = paste0(abstract_emphases, collapse = " ")) %>%
dplyr::select(institution, new) %>%
unique()
# Split emphases into terms
subject_emphases_of_collaborations2 <-  str_split(subject_emphases_of_collaborations1$new, " ")
# Determine 5 subject emphases
subject_emphases_of_collaborations3 = vector('character', length(subject_emphases_of_collaborations2))
for (i in seq_along(subject_emphases_of_collaborations2)) {
most_frequent_mentioned_words =
data_frame(lala2 = subject_emphases_of_collaborations2[[i]]) %>%
group_by(lala2) %>%
summarise(frequency = n()) %>%
arrange(desc(frequency)) %>%
head(5) %>%
dplyr::select(lala2)
final_most_frequent_mentioned_words = paste(unlist(most_frequent_mentioned_words), collapse = ' ')
subject_emphases_of_collaborations3[i] = final_most_frequent_mentioned_words
}
# Combine into the dataframe
subject_emphases_of_collaborations1$subject_emphases <- subject_emphases_of_collaborations3
# Combine number of collaborations and abstract emphases for each institution
final_result <-
subject_emphases_of_collaborations1 %>%
dplyr::select(institution, subject_emphases) %>%
inner_join(number_of_collaborations)
# Filter out insitutions that are not UNC
target <- c("University of North Carolina",
"University of North Carolina at Chapel Hill",
"Universityof North Carolina at Chapel Hill",
"University of North Carolinaat Chapel Hill",
"University ofNorth Carolina at Chapel Hill",
"University of NorthCarolina at Chapel Hill",
"University of North Carolina atChapel Hill",
"University of North Carolina at ChapelHill",
"University of North Carolina-Chapel Hill",
"University ofNorth Carolina-Chapel Hill",
"University of North Carolina at Chapel Hill",
"The University ofNorth Carolina",
"The University of North Carolina",
"and University of North Carolina atChapel Hill",
"Universityof North Carolina",
"University of North Carolina Chapel Hill",
"University of North Carolina at Chapel Hill School of Medicine",
"University of North Carolina at Chapel Hill School ofMedicine",
"University of North Carolina Chapel Hill")
final_result <- final_result %>%
filter(!(institution %in% target))
# Export table as a csv file
fileConn = file("final.csv")
writeLines(paste(final_result$institution, final_result$collaborations, final_result$subject_emphases, sep = ','), fileConn)
close(fileConn)
# Count the number of collaborations for each institution
number_of_collaborations <-
institution_information %>%
group_by(institution) %>%
summarise(collaborations = n()) %>%
arrange(desc(collaborations))
# Combine abstract emphases for the same institution
subject_emphases_of_collaborations1 <-
institution_information %>%
group_by(institution) %>%
mutate(new = paste0(abstract_emphases, collapse = " ")) %>%
dplyr::select(institution, new) %>%
unique()
subject_emphases_of_collaborations1
final_result
# Filter out insitutions that are not UNC
target <- c("University of North Carolina",
"University of North Carolina at Chapel Hill",
"Universityof North Carolina at Chapel Hill",
"University of North Carolinaat Chapel Hill",
"University ofNorth Carolina at Chapel Hill",
"University of NorthCarolina at Chapel Hill",
"University of North Carolina atChapel Hill",
"University of North Carolina at ChapelHill",
"University of North Carolina-Chapel Hill",
"University ofNorth Carolina-Chapel Hill",
"University of North Carolina at Chapel Hill",
"The University ofNorth Carolina",
"The University of North Carolina",
"and University of North Carolina atChapel Hill",
"Universityof North Carolina",
"University of North Carolina Chapel Hill",
"University of North Carolina at Chapel Hill School of Medicine",
"University of North Carolina at Chapel Hill School ofMedicine",
"University of North Carolina Chapel Hill")
final_result <- final_result %>%
filter(!(institution %in% target))
final_result
# Export table as a csv file
fileConn = file("final.csv")
writeLines(paste(final_result$institution, final_result$collaborations, final_result$subject_emphases, sep = ','), fileConn)
close(fileConn)
setwd("~/School/BIOS 611/BIOS611Git/Homeworks")
library(shiny)
library(tidyverse)
# Read the aggregated csv file
final = read_csv('final.csv', col_names = c('Institution Name', 'Number of Collaborations', "Subject Emphases"))
# Creat keywords to filter out UNC-Chapel and missing institution name
target <- c("University of North Carolina",
"The University of North Carolina at Chapel Hill",
"University of North Carolina School of Medicine",
"University of NorthCarolina", NA, ".")
# Filter out the top 10 collaborating institutions
final <-
final %>%
group_by(`Institution Name`) %>%
filter(!(`Institution Name` %in% target)) %>%
arrange(desc(`Number of Collaborations`)) %>%
head(10)
# Define UI for app that draws a histogram and a data table----
ui <- fluidPage(
# App title ----
titlePanel("UNC's Top 10 Collaborating Institutions"),
# Main panel for displaying outputs ----
mainPanel(
br(),
# Add Interpretation
p("The table below lists UNC's top 10 collaborating institutions based on the number of abstracts shared with UNC. The subject emphases allow the user to view the most abundant and differentiating words in the abstracts associated with each collaborating institution."),
br(),
# Output: Histogram and table----
dataTableOutput(outputId = "popTable")
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Data table output, linked to ui
output$popTable <- renderDataTable({final})
}
shinyApp(ui = ui, server = server)
setwd("~/School/BIOS 611/BIOS611Git/Homeworks")
# Read the aggregated csv file
final = read_csv('final.csv', col_names = c('Institution Name', 'Number of Collaborations', "Subject Emphases"))
# Creat keywords to filter out UNC-Chapel and missing institution name
target <- c("University of North Carolina",
"The University of North Carolina at Chapel Hill",
"University of North Carolina School of Medicine",
"University of NorthCarolina", NA, ".")
# Filter out the top 10 collaborating institutions
final <-
final %>%
group_by(`Institution Name`) %>%
filter(!(`Institution Name` %in% target)) %>%
arrange(desc(`Number of Collaborations`)) %>%
head(10)
# Define UI for app that draws a histogram and a data table----
ui <- fluidPage(
# App title ----
titlePanel("UNC's Top 10 Collaborating Institutions"),
# Main panel for displaying outputs ----
mainPanel(
br(),
# Add Interpretation
p("The table below lists UNC's top 10 collaborating institutions based on the number of abstracts shared with UNC. The subject emphases allow the user to view the most abundant and differentiating words in the abstracts associated with each collaborating institution."),
br(),
# Output: Histogram and table----
dataTableOutput(outputId = "popTable")
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Data table output, linked to ui
output$popTable <- renderDataTable({final})
}
shinyApp(ui = ui, server = server)
library(readr)
final <- read_csv("final.csv", col_names = FALSE)
View(final)
# Filter out the top 10 collaborating institutions
final <-
final %>%
group_by(`Institution Name`) %>%
filter(!(`Institution Name` %in% target)) %>%
arrange(desc(`Number of Collaborations`)) %>%
head(10)
library(readr)
final <- read_csv("final.csv", col_names = c('Institution Name', 'Number of Collaborations', "Subject Emphases"))
View(final)
# Filter out the top 10 collaborating institutions
final <-
final %>%
group_by(`Institution Name`) %>%
filter(!(`Institution Name` %in% target)) %>%
arrange(desc(`Number of Collaborations`)) %>%
head(10)
final
library(readr)
dataset <- read_csv("final.csv", col_names = c(c('Institution Name', 'Number of Collaborations', "Subject Emphases")))
View(final)
View(dataset)
# Filter out the top 10 collaborating institutions
final <-
dataset %>%
group_by(`Institution Name`) %>%
filter(!(`Institution Name` %in% target)) %>%
arrange(desc(`Number of Collaborations`)) %>%
head(10)
final
dataset %>%
group_by(`Institution Name`)
dataset %>%
group_by(`Institution Name`) %>%
filter(!(`Institution Name` %in% target))
dataset %>%
group_by(`Institution Name`) %>%
filter(!(`Institution Name` %in% target)) %>%
arrange(desc(`Number of Collaborations`))
# Read the aggregated csv file
final = read_csv('final.csv', col_names = c('Institution Name', 'Number of Collaborations', "Subject Emphases"))
# Creat keywords to filter out UNC-Chapel and missing institution name
target <- c("University of North Carolina",
"The University of North Carolina at Chapel Hill",
"University of North Carolina School of Medicine",
"University of NorthCarolina", NA, ".")
# Filter out the top 10 collaborating institutions
final <-
dataset %>%
group_by(`Institution Name`) %>%
filter(!(`Institution Name` %in% target)) %>%
arrange(desc(`Number of Collaborations`)) %>%
head(10)
dataset %>%
group_by(`Institution Name`) %>%
filter(!(`Institution Name` %in% target))
dataset %>%
group_by(`Institution Name`) %>%
filter(!(`Institution Name` %in% target)) %>%
arrange(desc(`Number of Collaborations`))
# Read the aggregated csv file
final = read_csv('final 3.22.12 PM.csv', col_names = c('Institution Name', 'Number of Collaborations', "Subject Emphases"))
# Creat keywords to filter out UNC-Chapel and missing institution name
target <- c("University of North Carolina",
"The University of North Carolina at Chapel Hill",
"University of North Carolina School of Medicine",
"University of NorthCarolina", NA, ".")
# Filter out the top 10 collaborating institutions
final <-
final %>%
group_by(`Institution Name`) %>%
filter(!(`Institution Name` %in% target)) %>%
arrange(desc(`Number of Collaborations`)) %>%
head(10)
# Define UI for app that draws a histogram and a data table----
ui <- fluidPage(
# App title ----
titlePanel("UNC's Top 10 Collaborating Institutions"),
# Main panel for displaying outputs ----
mainPanel(
br(),
# Add Interpretation
p("The table below lists UNC's top 10 collaborating institutions based on the number of abstracts shared with UNC. The subject emphases allow the user to view the most abundant and differentiating words in the abstracts associated with each collaborating institution."),
br(),
# Output: Histogram and table----
dataTableOutput(outputId = "popTable")
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Data table output, linked to ui
output$popTable <- renderDataTable({final})
}
shinyApp(ui = ui, server = server)
# Read the aggregated csv file
final = read_csv('final 3.22.12 PM.csv', col_names = c('Institution Name', 'Number of Collaborations', "Subject Emphases"))
# Creat keywords to filter out UNC-Chapel and missing institution name
target <- c("University of North Carolina",
"The University of North Carolina at Chapel Hill",
"University of North Carolina School of Medicine",
"University of NorthCarolina", NA, ".")
# Filter out the top 10 collaborating institutions
final <-
final %>%
group_by(`Institution Name`) %>%
filter(!(`Institution Name` %in% target)) %>%
arrange(desc(`Number of Collaborations`)) %>%
head(10)
# Define UI for app that draws a histogram and a data table----
ui <- fluidPage(
# App title ----
titlePanel("UNC's Top 10 Collaborating Institutions"),
# Main panel for displaying outputs ----
mainPanel(
br(),
# Add Interpretation
p("The table below lists UNC's top 10 collaborating institutions based on the number of abstracts shared with UNC. The subject emphases allow the user to view the most abundant and differentiating words in the abstracts associated with each collaborating institution."),
br(),
# Output: Histogram and table----
dataTableOutput(outputId = "popTable")
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Data table output, linked to ui
output$popTable <- renderDataTable({final})
}
shinyApp(ui = ui, server = server)
